from datetime import datetime
from fastmcp import FastMCP
from routes.basic_match import setup_basic_math_routes
from routes.prompts import setup_math_prompts
from routes.resources import setup_math_resources
from routes.statistics import setup_statistics_routes
from routes.geometry import setup_geometry_routes


def create_math_server() -> FastMCP:
    """–°–æ–∑–¥–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π MCP —Å–µ—Ä–≤–µ—Ä."""

    server = FastMCP("Mathematical Calculator & Tutor")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
    setup_basic_math_routes(server)
    setup_statistics_routes(server)
    setup_geometry_routes(server)
    setup_math_resources(server)
    setup_math_prompts(server)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—â–∏–µ tools
    @server.tool()
    def server_info() -> dict:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–µ."""
        return {
            "name": "Mathematical Calculator & Tutor",
            "version": "1.0.0",
            "description": "–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π MCP —Å–µ—Ä–≤–µ—Ä",
            "capabilities": {
                "tools": [
                    "–ë–∞–∑–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
                    "–†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π",
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
                    "–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
                    "–§–∞–∫—Ç–æ—Ä–∏–∞–ª—ã"
                ],
                "resources": [
                    "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã",
                    "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã",
                    "–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ",
                    "–ü—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω–∏–π"
                ],
                "prompts": [
                    "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π",
                    "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á",
                    "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ",
                    "–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫"
                ]
            },
            "created_at": datetime.now().isoformat()
        }

    @server.resource("math://help/getting_started")
    def getting_started() -> str:
        """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—á–∞–ª—É —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º."""
        return """
# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π MCP –°–µ—Ä–≤–µ—Ä - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ

## üßÆ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (Tools):
- `calculate_basic(expression)` - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
- `solve_quadratic(a, b, c)` - –†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
- `analyze_dataset(numbers)` - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
- `circle_properties(radius)` - –°–≤–æ–π—Å—Ç–≤–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
- `triangle_area(base, height)` - –ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
- `factorial(n)` - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞

## üìö –†–µ—Å—É—Ä—Å—ã (Resources):
- `/formulas/basic` - –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã
- `/constants/mathematical` - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã  
- `/help/statistics` - –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
- `/examples/{operation}` - –ü—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω–∏–π

## üí≠ –ü—Ä–æ–º–ø—Ç—ã (Prompts):
- `explain_solution` - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
- `create_practice_problems` - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
- `math_tutor` - –†–æ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
- `analyze_math_error` - –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ —Ä–µ—à–µ–Ω–∏—è—Ö

## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

### –í—ã—á–∏—Å–ª–µ–Ω–∏—è:
```
calculate_basic("2**3 + sqrt(16)")
solve_quadratic(1, -5, 6)
```

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
```
analyze_dataset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
correlation_coefficient([1, 2, 3], [2, 4, 6])
```

### –ì–µ–æ–º–µ—Ç—Ä–∏—è:
```
circle_properties(5)
distance_between_points(0, 0, 3, 4)
```
"""

    return server


# ================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ================================

if __name__ == "__main__":
    math_server = create_math_server()
    math_server.run(transport="http", port=3333, host="0.0.0.0")
